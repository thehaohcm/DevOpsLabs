*Essential Commands*
# ssh -V : show version
# ssh -v user@host : show status messages & debug connection

# mandb : init the apropos cmd database 
# apropos "NFS mounts" : find name and description of keyword in the manual page

# chmod +x ./script.sh : add execute permission int the ./script.sh file
# chgrp

# find /path -iname "keyword" : find all files have keyword name with insensitive case
# find /path \! -name "keyword" : find all files has not keyword name
# find /path -name "keywork" -exec cp {} /opt/ \; : find and copy all files have keywork name and cp them to /opt/ path

# find /path -perm 664 : find files have exactly 664 permission
# find /path -perm -664 : find files have equal or greater than 664 permission
# find /path -perm /664 : find files have permission o=6 OR g=6 OR o=4 

# find /path -type f -perm u=r ! -perm /o=wr : find all files in the /path that owner can read and either other can write or write

# find /path -mmin 5 : find all files created at now - 5min (exact time)
# find /path -mmin +5 : find all files created from [(now - 5min) to now]
# find /path -mmin -5 : find all files created before now - 5min
# find /path -mtime : -mtime calculate with day number
# find /path -ctime : -ctime & -cmin will select all files modified. Whereas mtim & mmin select all files created

# grep -iRn "keyword" /path : find all files which contain the keyword recursively from /path
# grep -r --text "keyword" /path
# egrep "^c*e$" /path : find all files which contain the keyword beginning by 'c' character and ending with 'e' character
# egrep "\b2[0-9]{0,}\b" : find all numbers in files that begining with '2'

cat [file_name]
tac [file_name]
head -n [number_line] [file_name]
tail -n [number_line] [file_name]
sed [-i] 's/[old_word]/[new_word]/g' [file_name]
sed [-i] 's/[old_word]/[new_word]/gi' [file_name]: change old word (with ignore sensitive case) to new word
sed [-i] '200,500s/[old_word]/[new_word]/g[i]' [file_name]: only apply from line 200 to 500
sed [-i] 's~[old_word]~[new_word]~g' [file_name]: apply for complex words
cut -d ' ' -f [column_num] [file_name]
uniq [file_name]: remove duplicated words in the next line
sort [file_name]
diff [file1] [file2]
< only exists in file1
-----
> only exists in file2
diff -c [file1] [file2]: show context of file in summary
diff -y [file1] [file2]: show diff side by side
diff -i: ignore the case, insenstive case

LESS usage:
-i/[key_word]: search with insensitive keyword in less

vim stands for VI IMPROVED
/[key_word]\c : search with insensitive keyword in vim
yy (double y): copy the line
d: cut the line
p: paste the line
:set number : show line number
1000 dd : delete first 1000 lines

GREP usage:
# grep -ir --color : force grep to show color 
# grep -v : invert the result, that mean all lines hadn't shown in the grep orginal will be show by this cmd.
ex: # grep -v '^#': show all lines configured in the file
# grep -w : search with particular word
# grep -ow : show only the word and not care about the rest of line, it is useful when use togethe with wc -l cmd to count how many words appear in the file

Regular Expression:
'^Pass': line has word start with 'Pass'
'word$': line has word end with 'word'
grep -w '7$': find all words have number 7
'c.t': dot(.) represent for a only character. Ex: a, b, c, 1, 2, ...
grep '\.': find a word with dot(.) word
grep 'let*':
grep '0\+' or grep -E '0+' or egrep '0+' : find all words have 0 and follow one or many 0 backward
grep -ic '^SECTION': count all words started with S and ignore case
egrep '0{3,}': find all words has at least 3 zeros
egrep '10{,3}': find all words contain 1 and followed by most 3 zeros
egrep '0{3}': find all words have exactly 3 zeros
egrep 'disabled?': find all words have either 'disable' or 'disabled'
egrep 'enabled|disabled': find all words have either 'enabled' or 'disabled'
egrep 'c[au]t': find all words have 'c' and a to u word and finally the 't'
egerp '/dev/.*': find all words 
egrep '/dev/[a-z]*'
egrep '/dev/[a-z]*[0-9]?'
egrep '/dev/([a-z]*[0-9]?)*'
egrep 'https[^:]': find all words have https and end with anything expect ':', ex: 'https,' 'httpso'...

TAR usage:
# tar tf: list tar files
# tar cf: create tar file
# tar rf: append tar file
# tar xf -C: extract tar file

gzip/bzip2/xz
gzip file1
gzip --list file1.gz
gunzip --keep file1.gz
tar cvfz archive.tar.gz file1

bzip2 file2
bunzip --keep file2.bz2
tar cvfj archive.tar.bz2 file2

xz file3
tar cvfJ archive.xz file 2
unxz --keep file3.xz

zip archive.zip file1
zip -r archive.zip Picture/
unzip archive.zip


SUID, GUID, sticky bit
SUID: 4 (S/s in rwS/rws) : execute the file as owner user
the permission file will be: rwS/rws
uppercase S : SUID bit is on, and the execution bit is off
lowercase s : both SUID and execution bit are on
GUID: 2 (S: execute the file as onwer group
set both SUID and GUID: # chmod 6664 (4+2=6)
sticky bit: 1 : retrict anyone to remove the directory (in sake of sharing the director to people). Not allow for applying the file
only owner and root can delete the file which enabled sticky bit
set sticky bit: # chmod 1777 dir/ or # chmod +t dir/
the permission dir will be drwxrwxrwt (when execution bit is on together) or drwxrwxrwT )when execution bit is off)

Git:
# git add .
# git commit -m "message"
# git push .
# git branch new_branch: create a new branch
# git checkout -b new_branch
# git branch -D new_branch : delete branch
# git log --raw
# git merge master
# git push origin master
# git pull origin master
# git clone repository

Docker:
# docker images
# docker build -t "image_name" .
# docker push
# docker run --name new image_name

Stuffs:
# ping -c 4 8.8.8.8 : ping 4 times to IP 8.8.8.8

*Operations Deployment*
# shutdown +120 : shutdown the computer after 120m (=2h)
# shutdown -c : cancel the scheduled shutdown you configured before

# sleep 10 : sleep for 10 seconds

# ps aux : show all processes
# ps lax : show all processes with nice values
# ps 1 : display inform about the process with PID = 1
# ps u 1 : provide more info such as ram cpu about the process (u = show resources as ramm,cpu,...)
# pgrep -a rpcbind : get PID of the process name rpcbind
# lsof -p 1 : list all files that opened by process ID = 1

# [cmd] & : run the cmd in the background
# fg : get back the backgroup cmd
# bg [PID] : resume a stopped process
# ctrl + z : send the cmd or app to background

# ls -laZ /bin/sudo : checkout the SELinux label for the files stored at /bin/sudo

Get all users of SELinux defined in OS:
# semanage user -l
Get all roles of SELinux defined in OS:
# seinfo -r 

Change SELinux status:
Temporary way:
# setenforce 0 (Permissive - turn off)
# setenforce 1 (Enforce - turn on)
Permanent way:
# vi /etc/selinux/config
SELINUX=disable
SELINUX=permissive
SELINUX=enforcing
# reboot
Check status:
# sestatus
# getenforce
Set SELabel for a specific file:
# setfacl -m u:hjeremy:rw file1 : set facl for user jeremy can read and write the file
# setfacl -m g:sudo:--- file1 : set facl for group sudo no permisison this file
# setfacl --remove-all file3 : remove all selabel permisison for this file
# setfactl --recursive --remove group:sudo dir1/ : remove user jeremy from dir1 and it's sub files & folders
# getfacl file1 : get SE label facl for the file file1
# setfacl -m mask:r file1 : specific that the maximum permisison for this file is just 'read', even though we did define the facl is 'rw'
Notice: the 'mask' defines the maximum permission taht this file or dir can have

Files and Dirs attribute
When we turn on an attr, it makes its behave in a diff way then it would normally.
Notice: Only root user can enable or disable the attribute
Attribute 'a' (append):
# chattr +a newfile : enable 'append' attribute, that me we can only append data AFTER, cannot change or overwrite data, ex: echo "acb" >> newfile
# chattr -a newfile : remove the attribute 'append' from the file
Attribute 'i' (immutable):
# chattr +i newfile: enable 'immutable' attribute, that mean we cannot change the file 's data, edit, rename, delete, edit anyway (even root, until it is removed)
# chattr -i newfile : remove the attribute 'immutable' from the file
# lsattr newfile : check attribute of file

Change the SELinux context temporarily:
# chcone -vR system_u:object_r:httpd_sys_script_exec_t:s0 /var/www/*/*php
Chane only type:
# chcon -t httpd_sys_content_t /var/index.html 
Change only user:
# chcon -u system_u /var/index.html 
Change only role:
# chcon -r object_r /var/index.html 
Change the SELinux content permanently (not finished yet)**TODO**:
# semanage fcontext 
Restore the SELinux label:
# restorecon -R /path

Change kernel runtime parameters:
Temporary way:
# sysctl -w kernel.modules_disabled=1
Permanent way:
# vi /etc/sysctl.conf
[add new parameters and value]
Apply new changes:
# sysctl -p
OR
# sysctl --system
Check value:
# systectl -a

# df / : Show % space of / partition is in used
# du -sh /bin/ : Show storage space of directory
# free --mega : Show memory
# uptime : Show how long the system is up
# lscpu : Show CPU info
# lspci : show network interface info

# nproc: limit process numbers that the user can run

Set limit resources:
# vi /etc/security/limit.conf
Change limit resources with soft way:
# ulimit -n 10 : change the nproc limit
# ulimit -Hn 10 : change the hard nproc limit

Check limit resources:
# nproc : get limit process 

System service:
# man systemd.service
# systemctl daemon-reload
# systemctl revert ssh
# systemctl restart ssh
# systemctl reload ssh
# systemctl restart-or-reload ssh
# systemctl enable --now ssh
# systemctl disbale --now ssh
# systemctl is-enabled ssh
# systemctl mask ssh : force way to prevent start/enable service
# systemctl umask ssh : allow to start/enable service
# systemctl list-units --type [service/socket/timer] --all
# systemctl daemon-reload : reload the daemon system after editing the serivce files

# nice -n [priority value] [cmd] : run a cmd with priority value
# renice [priority value] [PID] : change a priority value of an existing process
# kill -L : list all signal supported
# kill -SIGHUP 1 : send a SIGHUP signal to PID 1

System Logs:
# journalctl -f -t [service]
# journalctl -S 01:00 -U 02:00 : show logs that from 01:00 to 02:00
# journalctl -b 0 : show logs since the system booted
# journalctl -b -1  : show logs for the previous boot

# last : see history who logged into the system
# lastlog : see history who logged into the system

*Schedule tasks*
Cron (for a purpose that run the job frequently per day):
# crontab -u root -e
# crontab -l
# crontab -e

Anacron (for a purpose that run the job once per day):
# vi /etc/anacrontab
# anacron -T : check syntax & verify

At (for a purpose that run the job once):
# at 'Aug 20 204'
# at '20:00'
# at 'now + 30 minutes/days/hours/weeks/months'
# atq : list all jobs
# atrmm [id] : remove a job with [id]

*Software*
*APT*
# apt update
# apt list --upgradable
# apt upgrade
# apt search "apache http server" : Search for package
# apt install -y apache2
# dpkg --search /bin/ls : find out the name of package by path
# dpkg --listfiles coreutils : list oall fiels that belongs to package
# apt remove --auto-remove apache2 : auto remove all dependencies and package
# add-apt-repository ppa:john/latest-app : add a new repository
# add-apt-repository ppa:graphics-driver/ppa : add an existing repository
# add-apt-reposiroty --list : list all repositories
# add-apt-reposiroty --remove ppa:graphics-driver/ppa : remove a repository

*Install softwware form source code*
# git clone ...
# cd htop
Install all dependencies mentioned in README.md
# ./autogen.sh : generate all necessary files
# ./configure.sh : configure & check os/application
# make . : compile & build
# make install : install the application into the dedicated dir

*Users And Groups*
*Users*
# useradd john
# useradd -u 1 -G sudo -s /bin/csh -d /home/acb jane
# useradd --system bot : create a bot user system

# usermod -e 2030-03-01 janeL : set the expired date of jane user
# usermod -e "" jane : remove the expired date of jane
# usermod -L jane : lock the user jane
# usermod -U jane : unlock the user
# usermod -s /bin/csh jane : change the shell of jane user
# usermod -d /home/other jane : change home dir of jane user

Add user to group
# usermod -a -G group user
OR
# gpasswd -a user group
Remove user from group
# gpasswd -d user group

Add password for user:
# echo "[user]:[password]" | sudo chpasswd

Notice: add user to sudo group
Option 1:
# gpasswd -a user sudo
Option 2:
# visudo
%sudo   ALL=(ALL) ALL
If we don't need to type password:
user   ALL=(ALL) PASSWD:ALL

# userdel -r jane : delete user jane, include the home dir

Notice: cmd useradd is a native whereas adduser is an extension written in perl

*Groups*
Show all groups:
# groups

# groupadd groupname
# groupmod -n new_group old_group
# groupdel groupname

Notice: cmd groupadd is a native whereas addgroup is an extension written in perl

*Networking*
# hostname : get hostname only
# hostnamectl : get hostname and info
# hostnamectl set-hostname "hostname" : set hostname permanently without rebooting

set hostname permanently (rebooting required)
# vi /etc/hostname
# vi /etc/hosts : add or change the IP alias name
# systemctl reboot

Change nameserver:
Option 1: use systemd-resolved
# vi /etc/systemd/resolved.conf
[Resolve]
DNS=8.8.8.8 8.8.4.4
FallbackDNS=1.1.1.1 1.0.0.1
# systemctl restart systemd-resolved
# resolvectl status : check status

Option 2: use resolvconf (tranditional way)
# apt install -y resolvconf
# vi /etc/resolv.conf
nameserver x.x.x.x
nameserver y.y.y.y
# resolvconf -u : update the new change

Option 3: use netplan
# vi /etc/netplan/99-custom.yaml
---
network:
  version: 2
  ethernets:
    eth0:
      nameserverss:
        addresses:
          - 8.8.8.8
          - 8.8.4.4
# netplan apply
# resolvctl status | grep "DNS Server" -A2
Notice: netplan doc: 
# ls /usr/share/doc/netplan/examples/

Checking network services:
# ss -tunlp
-l: listing
-t: TCP
-u: UDP
-n: numeric values (port number, ex: :22)
-p: processes
# ss -tn : show the current IP address connecting to the server

*Configure IP*
# ip link
# ip -c a
# ip link set enp0s3 down
# ip link set enp0s3 up
# ip a add 10.0.0.1/24 dev enp0s3
# ip a delete 10.0.0.40/24 dev enp0s3

*Firewall*
# ufw status [verbose] : check ufw status
# ufw status numbered : show all rule with order number
# ufw allow 22 : allow port 22
# ufw allow 22/tcp : allow port 22 in TCP
# ufw enable : enable ufw
# ufw allow from 10.0.0.1 to any 22/tcp : only allow IP 10.0.0.1 connect to port 22 in TCP
# ufw delete [ID] : delete a rule with ID number
# ufw delete allow 22/tcp : delete the rule that allows port 22 TCP
# ufw allow from 10.0.0.0/24 to any port 22 : allow range IP 10.0.0.0 - 10.0.0.225 to port 22
# ufw allow from 10.0.0.0/24 to any : allow range IP 10.0.0.0 - 10.0.0.225 to any port
# ufw deny from 10.0.0.37 : deny IP 10.0.0.37 to any port
# ufw insert 1 deny from 10.0.0.37 : add 1 rule with ID=1 that deny IP 10.0.0.37
# ufw deny out on enp0s3 to 8.8.8.8 : add 1 rule that deny go out network package, specify on interface network enp0s3 to 8.8.8.8
# ufw allow in on enp0s3 from 10.0.0.192 to 10.0.0.100 proto tcp
# ufw allow out on enp0s3 from 10.0.0.100 to 10.0.0.192 proto tcp

*Synchronize System Time*
# timedatectl list-timezones : list all timezones
# timedatectl set-timezone America/Los_Angeles : set timezone
# timedatectl : Show date time and info
# apt install -y systemd-timesyncd : install ntp package
# timedatectl set-ntp true : enable ntp
# timedatectl show-timesync : show all info of timedate and NTP
file config ntp: # vi /etc/systemd/timesyncd.conf

*Configure SSH Server and Client*
SSH config file in server: # vi /etc/ssh/sshd_config
SSH config file in client: # vi ~/.ssh/config (make sure the file has chmod 600)
content:
Host ubuntu-vm
  HostName 10.0.0.14
  Port 22
  User jeremy

Create a new public/private keys
In your local PC, run these 2 cmds:
# ssh-keygen : generate a fingerprint (a pair of key)
# ssh-copy-id user@server_host : copy a public key to server
OR
copy a content from .pub key (from client) and past it to path ~/.ssh/authorized_key (in server). Change permission # chmod 600 ~/.ssh/authorized_key (this way is not recommended)
# ssh-keygen -R [host_server] && rm ~/.ssh/known_host: remove a fingerprint 

*Storage*
# xfs_repair -v /dev/vdb : Check XFS filesystem (xfs is a default filesystem in RedHat)
# fsck.ext4 -v -f -p /dev/vdb : Check ext4 filesystem (ext4 is a default filesystem in Ubuntu)

*Physical Storage Partitions*
# lsblk : show all virtual disks and partitions
# fdisk /dev/vdb1 : show all info about the partition /dev/vdb1
# cfdisk : add/change/delete partitions

Create file and format as a swap:
# dd if=/dev/zero of=/swap bs=1M count=128 status=progress : create a file /swap with size 128
# chmod 600 /swap
# mkswap /swap : format the swap file
# swapon -v /swap : turn on the swap
# swapon -s : show all swap files
# swapoff /swap : turn off the swap

Notice: 
XFS: mkfs.xfs + utility: xfs_admin
EXT4: mkfs.ext4 + utility: tune2fs

XFS filesystem:
# mkfs.xfs /dev/sdb1 : format the xfs filesystem
# mkfs.xfs -L "BackupVolume" /dev/sdb1 : format and set label for the xfs filesystem
# mkfs.xfs -f -i size=512 -L "BackupVolume" /dev/sdb1 : format, set node size = 512 and set label 
# xfs_admin -L "FirstFS" /dev/sdb1 : change the label
# xfs_admin -l /dev/sdb1 : show label

EXT4 filesystem:
# mkfs.ext4 /dev/sdb2 : format the ext4 filesystem
# mkfs.ext4 -N 5000 /dev/sdb2 : specify a maximum node number. If the node number is ran out => we cannot create more file even the disk capacity is still remaining
# tune2fs -l /dev/sdb2 : show info & properties of the partition (include name)
# tune2fs -L "SecondFS" /dev/sdb2 : change label of the partition

Find mount:
# findmnt
# findmnt -t ext4,xfs

Mount partition to path:
# mount -o [r|w|o|remount][,noexec][,nosuid] /dev/[partition] /[path]
noexec: cannot launch the program inside
nosuid: don't allow to run with root privileges without needing sudo cmd
noexec + nosuid: impove security on filesystem inside to run program
# mount -o allocsize=32k /dev/vdb1 /mybackups

Network Filesystem (NFS)
install:
NFS Server side
# apt install nfs-kernel-server
config (share the path /srv/homes/ to the hostname1):
# vi /etc/exports
/srv/homes       hostname1(rw,sync,no_subtree_check) hostname2(ro,sync,no_subtree_check)
/srv/homes       *.hostname.com(rw,sync,no_subtree_check) 
/srv/homes       *(rw,sync,no_subtree_check): share to any user
/srv/homes       127.0.0.1/24(rw,sync,no_subtree_check)
1st option:
+rw:
+ro:
2nd option:
+ sync: synchronous writes
+ async: asynchronous writes. This allows clients to do things faster, but it doesn't guarantee that all changes are actually stored (it would be incorrect especially in case the server reboot unexpectedly) 
3rd option:
+ no_subtree_check: disbales subtree checking
+ no_root_squash: allows root user to have root privileges
apply new change:
# exportfs -r 
see current exported nfs:
# exportfs -v

NFS Client side
# apt install -y nfs-common
Mount a remote NFS share:
# mount [IP/hostname]:/path/to/remote/ /path/to/local
Unmount:
# mount /path/to/local
Auto-mount:
# vi /etc/fstab
127.0.0.1:/path/ /path/to/local nfs defaults 0 0

NBD
NDB server:
# apt install nbd-server
Config:
# vi /etc/nbd-server/config
comment nbd user , not allow nbd user use it
# user = nbd
# group = nbd
allow ndb client to list what exports the server has available, we can see what block devices can share with us:
allowlist = true
add new partion:
[partition2]
  exportname=/dev/vda1
restart NBD:
# systemctl restart ndb-server

NBD client side:
# apt install nbd-client
config to config new network block:
# modprobe nbd: we need to do it everytime we restart the system
Config the new network block:
# vi /etc/modules-load.d/modules.conf
# nbd
[save file]
attach a remote block device:
# nbd-client 127.0.0.1 -N partition2
# mount /dev/nbd0 /mnt
Unmount and remove the remote block device:
# umount /mnt
# ndb-client -d /dev/nbd0

LVM Storage
LVM is a way make resize a particular partition easier
Install LVM tool:
# apt install -y lvm2
There are 4 terms in LVM in ordered:
PV: Physical Volume: represent real storage or partition of devices that LVM manage & works
Check pv: # lvmdiskscan
Create pv: # pvcreate /dev/sdc /dev/sdd
Show total size of pv: # pvs
Remove the pv: # pvremove /dev/sde

VG: Volume Group: represent a storage capacity of one or some PVs combined
Create vg: # vgcreate [NameOfGroup] [NameOfPV] (ex: vgcreate my_vol /dev/sdc /dev/sdd)
notice: we can keep growing the VG by adding more disks by # vgextend (ex vgextend my_vol /dev/sde)
Or reduce a disk from the VG by # vgreduce my_vol /dev/sde
Show VGs: # vgs

LV: Logical Volume: a "partition term" in LVM manages & works
Create LV: # lvcreate --size [sizeK/M/G] --name [lvmName] [LvmName] [VgName] (ex: # lvcreate --size 2G --name partition1 my_vol)
Show LVs: # lvs
Extend LV: # lvresize --extends 100%VG my_vol/partition1 : extend 100% of all VG size is available
Reduce/Shrink: # lvresize --size 2G my_vol/partition1
Path of LVM: /dev/nameOfVG/nameOfLV
See all info of LV: # lvdisplay
Create an ext4 file system from LV:
# mkfs.ext4 /dev/my_vol/partition1
Resize the LV and the file system inside
# lvresize --resizefs --size 3G my_vol/partition1


PE: Physical Extent: a real partition LVM manage and merged when you extend the LV

Openssl
Create a key with RSA 2056:
# openssl genrsa -out priv.key 2048
Create a csr with key file:
# openssl req -new -key priv.key -out mycsr.csr
Create both key and csr:
# openssl req -newkey rsa:[2048|4096] -keyout priv.key -out mycsr.csr
Create a self-signed cert with key and csr:
# openssl x509 -req -day 365 -in mycsr.csr -signkey priv.key -out mycert.crt
Show info of the CSR:
# openssl x509 -in [.key|.csr|.crt] -text -nout

Nginx

Load Balancer
Add new server IP as a load balancer:
# vi /etc/nginx/sites-available/loadbalancer.conf
Add new line to the upstream block:
server 10.9.0.3 weight=3;
Notice: the /etc/nginx/site-available dir is also storing all config files. If you want to enable it to nginx use, we have to create a symlink from it to /etc/nginx/site-availble
Create a symlink to the sites-enabled directory:
# ln -s /etc/nginx/site-available/loadbalancer.conf /etc/nginx/site-enabled/loadbalancer.conf
Notice: ln -s [source] [destination]
Reload/restart the nginx:
# systemctl reload nginx

Ex nginx config for proxy:
server{
  listen 80;
  location / {
    proxy_pass http://1.1.1.1;
  }
}

Ex nginx config for load balancer:
upstream mywebservers{
  least_conn; //config nginx to traffic all requests to servers which less connection
  server 1.2.3.4:8081 weight=3; //config weight to specify that this server has higher resource than the others
  server 5.6.7.8 down; //we can mark the server is being maintained as 'down' keyword, then a new request will not be sent
  server 10.20.30.40 backup; //'backup' keyword is marked for this server to specify that this server is not sent any request until any server above is down
}
server{
  location / {
    proxy_pass http://mywebservers;
  }
}

Port Redirection
Setup a port redirection rule from [sourceIP] port 8080, then redirect to [DestinationIP] port 80:
# iptables -t nat -A PREROUTING -s [source IP] -p tcp --dport [port] -j DNAT --to-destionation [destination IP]
Setup masqueraging so that traffic can also be returned to the [sourceIP]:
# iptables -t nat -A POSTROUTING -s [source IP] -j MASQUERADE
Persist iptables rules:
# apt install iptables-peristent

Monitor Hard Disk:
# apt instal -y sysstat
there are 2 tools in sysstat:
# iostat : monitor input/output data (I/O statistics)
# iostat 1 : monitor them and refresh every second
# iostat -h : 
# iostat -p ALL : show all devices
# isostat -p sda: show all sda devices
# pidstat : monitor process ID statistics
# pidstat -d : show proccess (PIDs) running that affect the read/write speed storage
# dmsetup info /dev/dm-0 : 

LDAP
Config file: /etc/nslcd.conf
Get User data config file: /etc/nsswitch.conf
# systemctl restart nslcd

Virt-Virsh
# virsh list --all
# virt-install --os-variant ubuntu --ram 2048 --vcpus 1 --name virtualPC --import --disk /var/lib/libvirt/images/ubunut22.img --noautoconsole
# virsh autostart virtualPC
